name: Deploy Seminar Materials
on:
  push:
    branches: [ main ]
    paths:
      - '*/slide.md'
      - '*/handson/**'
      - '*/assets/**'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Japanese fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto-cjk fonts-noto-cjk-extra
          # „Éï„Ç©„É≥„Éà„Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÊõ¥Êñ∞
          fc-cache -fv

      - name: Install Marp CLI
        run: npm install -g @marp-team/marp-cli

      - name: Find all seminar directories
        id: find-dirs
        run: |
          # ÂÖ®„Å¶„ÅÆÊó•‰ªò„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÂèñÂæó
          ALL_DATES=$(find . -maxdepth 1 -type d -name '[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]' | sed 's|./||' | sort)
          
          echo "Found directories:"
          echo "$ALL_DATES"
          
          if [ -n "$ALL_DATES" ]; then
            echo "has_directories=true" >> $GITHUB_OUTPUT
            echo "all_dates<<EOF" >> $GITHUB_OUTPUT
            echo "$ALL_DATES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "has_directories=false" >> $GITHUB_OUTPUT
          fi

      - name: Create docs directories
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          mkdir -p docs/slides
          mkdir -p docs/handson

      - name: Generate materials
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          echo "${{ steps.changes.outputs.changed_dates }}" | while read DATE_DIR; do
            if [ -n "$DATE_DIR" ] && [ -d "$DATE_DIR" ]; then
              echo "Processing $DATE_DIR..."
              
              # assets„Éá„Ç£„É¨„ÇØ„Éà„É™„Çídocs/slides/„Å´„Ç≥„Éî„ÉºÔºàÁîªÂÉèÁî®Ôºâ
              if [ -d "$DATE_DIR/assets" ]; then
                echo "Copying assets for $DATE_DIR"
                mkdir -p "docs/slides/assets"
                cp -r "$DATE_DIR/assets"/* "docs/slides/assets/"
                # „ÇÇ„Åó„Åè„ÅØÊó•‰ªòÂà•„ÅÆassets„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
                mkdir -p "docs/slides/$DATE_DIR-assets"
                cp -r "$DATE_DIR/assets"/* "docs/slides/$DATE_DIR-assets/"
              fi
              
              # Âêå„Åò„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÁîªÂÉè„Éï„Ç°„Ç§„É´„ÇÇ„Ç≥„Éî„Éº
              find "$DATE_DIR" -maxdepth 1 \( -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif" -o -name "*.svg" \) | while read img_file; do
                if [ -f "$img_file" ]; then
                  echo "Copying image: $img_file"
                  cp "$img_file" "docs/slides/"
                  # Êó•‰ªòÂà•„Éá„Ç£„É¨„ÇØ„Éà„É™„Å´„ÇÇ„Ç≥„Éî„Éº
                  mkdir -p "docs/slides/$DATE_DIR-assets"
                  cp "$img_file" "docs/slides/$DATE_DIR-assets/"
                fi
              done
              
              # „Çπ„É©„Ç§„ÉâÁîüÊàê (slide.md„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅÆ„Åø)
              if [ -f "$DATE_DIR/slide.md" ]; then
                echo "Generating slides for $DATE_DIR"
                
                # ‰∏ÄÊôÇÁöÑ„Å´slide.md„ÅÆÁîªÂÉè„Éë„Çπ„ÇíË™øÊï¥„Åó„Åü„Éê„Éº„Ç∏„Éß„É≥„Çí‰ΩúÊàê
                cp "$DATE_DIR/slide.md" "temp-slide.md"
                
                # Áõ∏ÂØæ„Éë„Çπ„ÇíË™øÊï¥ÔºàHTMLÁî®Ôºâ
                sed 's|!\[\([^]]*\)\](\([^)]*\))|![\1](./'$DATE_DIR'-assets/\2)|g' "temp-slide.md" > "temp-slide-html.md"
                # assets„Éï„Ç©„É´„ÉÄÂÜÖ„ÅÆÁîªÂÉè„Éë„Çπ„ÇÇË™øÊï¥
                sed -i 's|assets/|'$DATE_DIR'-assets/|g' "temp-slide-html.md"
                
                # HTMLÁîüÊàêÔºàË™øÊï¥„Åï„Çå„Åü„Éë„Çπ‰ΩøÁî®Ôºâ
                marp "temp-slide-html.md" \
                  --html \
                  --allow-local-files \
                  --output "docs/slides/$DATE_DIR.html"
                
                # PDFÁîüÊàêÔºàÂÖÉ„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„Åß slide.md „ÇíÊòéÁ§∫ÁöÑ„Å´ÊåáÂÆöÔºâ
                cd "$DATE_DIR"
                marp slide.md \
                  --pdf \
                  --allow-local-files \
                  --output "../docs/slides/$DATE_DIR.pdf"
                cd ..
                
                # ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´ÂâäÈô§
                rm -f "temp-slide.md" "temp-slide-html.md"
                
                echo "‚úÖ Generated slides for $DATE_DIR"
              else
                echo "‚ö†Ô∏è slide.md not found in $DATE_DIR"
              fi
              
              # „Éè„É≥„Ç∫„Ç™„É≥Ë≥áÊñô„ÅÆ„Ç≥„Éî„Éº (handson„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅÆ„Åø)
              if [ -d "$DATE_DIR/handson" ]; then
                echo "Copying handson materials for $DATE_DIR"
                
                # handson„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí„Åù„ÅÆ„Åæ„Åæ„Ç≥„Éî„Éº
                cp -r "$DATE_DIR/handson" "docs/handson/$DATE_DIR"
                
                echo "‚úÖ Copied handson materials for $DATE_DIR"
              else
                echo "‚ÑπÔ∏è handson directory not found in $DATE_DIR"
              fi
            fi
          done

      - name: Generate site index
        if: steps.find-dirs.outputs.has_directories == 'true'
        run: |
          cat > docs/index.html << 'HTMLEOF'
          <!DOCTYPE html>
          <html lang="ja">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>üìö „Çª„Éü„Éä„ÉºË≥áÊñô</title>
              <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.2.0/github-markdown-light.min.css">
              <style>
                  body { 
                      max-width: 980px; 
                      margin: 0 auto; 
                      padding: 45px; 
                      font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Noto Sans, Helvetica, Arial, sans-serif;
                  }
                  .header {
                      text-align: center;
                      margin-bottom: 40px;
                      padding-bottom: 20px;
                      border-bottom: 2px solid #e1e4e8;
                  }
                  .session { 
                      margin: 30px 0; 
                      padding: 25px; 
                      border: 1px solid #e1e4e8; 
                      border-radius: 8px;
                      background: #f8f9fa;
                      transition: transform 0.2s, box-shadow 0.2s;
                  }
                  .session:hover {
                      transform: translateY(-2px);
                      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                  }
                  .updated { 
                      border-left: 4px solid #28a745; 
                      background: linear-gradient(to right, #f1f8ff, #f8f9fa);
                  }
                  .session h2 {
                      margin-top: 0;
                      color: #24292e;
                      display: flex;
                      align-items: center;
                      gap: 10px;
                  }
                  .links { 
                      display: flex; 
                      gap: 15px; 
                      margin-top: 15px; 
                      flex-wrap: wrap; 
                  }
                  .links a { 
                      padding: 10px 20px; 
                      background: #0366d6; 
                      color: white; 
                      text-decoration: none; 
                      border-radius: 6px; 
                      font-size: 14px;
                      font-weight: 500;
                      transition: background-color 0.2s;
                      display: flex;
                      align-items: center;
                      gap: 8px;
                  }
                  .links a:hover { 
                      background: #0256cc; 
                  }
                  .links a.handson {
                      background: #28a745;
                  }
                  .links a.handson:hover {
                      background: #1e7e34;
                  }
                  .status { 
                      font-size: 12px; 
                      color: #6a737d; 
                      margin-top: 10px;
                      padding: 5px 10px;
                      background: #e1f5fe;
                      border-radius: 4px;
                      display: inline-block;
                  }
                  .update-time {
                      text-align: center;
                      color: #6a737d;
                      font-size: 14px;
                      margin-bottom: 30px;
                  }
              </style>
          </head>
          <body class="markdown-body">
              <div class="header">
                  <h1>üìö „Çª„Éü„Éä„ÉºË≥áÊñô</h1>
                  <div class="update-time">ÊúÄÁµÇÊõ¥Êñ∞: 
          HTMLEOF
          date '+%YÂπ¥%mÊúà%dÊó• %H:%M (JST)' >> docs/index.html
          cat >> docs/index.html << 'HTMLEOF'
          </div>
              </div>
          HTMLEOF
          
          # ÂÖ®„Å¶„ÅÆÊó•‰ªò„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí„Çπ„Ç≠„É£„É≥„Åó„Å¶‰∏ÄË¶ß‰ΩúÊàêÔºàÊñ∞„Åó„ÅÑÈ†ÜÔºâ
          find . -maxdepth 1 -type d -name '[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]' | sort -r | while read dir; do
            DATE_DIR=$(basename "$dir")
            
            # ‰ªäÂõûÊõ¥Êñ∞„Åï„Çå„Åü„Åã„ÉÅ„Çß„ÉÉ„ÇØ
            IS_UPDATED=""
            if echo "${{ steps.find-dirs.outputs.all_dates }}" | grep -q "$DATE_DIR"; then
              IS_UPDATED="updated"
            fi
            
            echo "    <div class=\"session $IS_UPDATED\">" >> docs/index.html
            echo "        <h2>üìÖ $DATE_DIR $([ -n "$IS_UPDATED" ] && echo 'üÜï')</h2>" >> docs/index.html
            echo "        <div class=\"links\">" >> docs/index.html
            
            # „Çπ„É©„Ç§„Éâ„É™„É≥„ÇØÔºà„Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅÆ„ÅøÔºâ
            if [ -f "docs/slides/$DATE_DIR.html" ]; then
              echo "            <a href=\"slides/$DATE_DIR.html\">üìä „Çπ„É©„Ç§„Éâ (HTML)</a>" >> docs/index.html
            fi
            if [ -f "docs/slides/$DATE_DIR.pdf" ]; then
              echo "            <a href=\"slides/$DATE_DIR.pdf\">üìÑ „Çπ„É©„Ç§„Éâ (PDF)</a>" >> docs/index.html
            fi
            
            # „Éè„É≥„Ç∫„Ç™„É≥„É™„É≥„ÇØÔºà„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅÆ„ÅøÔºâ
            if [ -d "docs/handson/$DATE_DIR" ]; then
              echo "            <a href=\"handson/$DATE_DIR/\" class=\"handson\">üíª „Éè„É≥„Ç∫„Ç™„É≥</a>" >> docs/index.html
            fi
            
            echo "        </div>" >> docs/index.html
            
            # Êõ¥Êñ∞„Çπ„ÉÜ„Éº„Çø„ÇπË°®Á§∫
            if [ -n "$IS_UPDATED" ]; then
              echo "        <div class=\"status\">‚ú® ‰ªäÂõûÊõ¥Êñ∞„Åï„Çå„Åæ„Åó„Åü</div>" >> docs/index.html
            fi
            
            echo "    </div>" >> docs/index.html
          done
          
          cat >> docs/index.html << 'HTMLEOF'
              
              <div style="text-align: center; margin-top: 50px; padding-top: 30px; border-top: 1px solid #e1e4e8; color: #6a737d;">
                  <p>ü§ñ „Åì„ÅÆ„Éö„Éº„Ç∏„ÅØ GitHub Actions „Å´„Çà„ÇäËá™ÂãïÁîüÊàê„Åï„Çå„Å¶„ÅÑ„Åæ„Åô</p>
              </div>
          </body>
          </html>
          HTMLEOF

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        if: steps.changes.outputs.has_changes == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

      - name: Deploy to GitHub Pages
        if: steps.find-dirs.outputs.has_directories == 'true'
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Summary
        if: steps.find-dirs.outputs.has_directories == 'true'
        run: |
          echo "## üéâ „Éá„Éó„É≠„Ç§ÂÆå‰∫Ü!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‰ª•‰∏ã„ÅÆË≥áÊñô„ÅåÂá¶ÁêÜ„Åï„Çå„Åæ„Åó„Åü:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "${{ steps.find-dirs.outputs.all_dates }}" | while read DATE_DIR; do
            if [ -n "$DATE_DIR" ]; then
              echo "### üìÖ $DATE_DIR" >> $GITHUB_STEP_SUMMARY
              
              if [ -f "docs/slides/$DATE_DIR.html" ]; then
                echo "- ‚úÖ „Çπ„É©„Ç§„Éâ (HTML) ÁîüÊàêÂÆå‰∫Ü" >> $GITHUB_STEP_SUMMARY
              fi
              if [ -f "docs/slides/$DATE_DIR.pdf" ]; then
                echo "- ‚úÖ „Çπ„É©„Ç§„Éâ (PDF) ÁîüÊàêÂÆå‰∫Ü" >> $GITHUB_STEP_SUMMARY
              fi
              if [ -d "docs/handson/$DATE_DIR" ]; then
                echo "- ‚úÖ „Éè„É≥„Ç∫„Ç™„É≥Ë≥áÊñô „Ç≥„Éî„ÉºÂÆå‰∫Ü" >> $GITHUB_STEP_SUMMARY
              fi
              
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "üîó **GitHub Pages URL:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY

      - name: Display no directories message
        if: steps.find-dirs.outputs.has_directories == 'false'
        run: |
          echo "## ‚ÑπÔ∏è Âá¶ÁêÜÂØæË±°„Å™„Åó" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Êó•‰ªòÂΩ¢ÂºèÔºàYYYY-MM-DDÔºâ„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ" >> $GITHUB_STEP_SUMMARY