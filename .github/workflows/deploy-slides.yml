name: Deploy Seminar Materials
on:
  push:
    branches: [ main ]
    paths:
      - '*/slide.md'
      - '*/handson/**'
      - '*/assets/**'
      - '.github/workflows/deploy-seminar-materials.yml'  # ワークフロー自体の変更も検知
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得（全ディレクトリを確実に取得するため）

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Japanese fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto-cjk fonts-noto-cjk-extra
          # フォントキャッシュを更新
          fc-cache -fv

      - name: Install Marp CLI
        run: npm install -g @marp-team/marp-cli

      - name: Find all seminar directories
        id: find-dirs
        run: |
          # 全ての日付ディレクトリを取得
          ALL_DATES=$(find . -maxdepth 1 -type d -name '[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]' | sed 's|./||' | sort)
          
          echo "Found directories:"
          echo "$ALL_DATES"
          
          if [ -n "$ALL_DATES" ]; then
            echo "has_directories=true" >> $GITHUB_OUTPUT
            echo "all_dates<<EOF" >> $GITHUB_OUTPUT
            echo "$ALL_DATES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "has_directories=false" >> $GITHUB_OUTPUT
          fi

      - name: Create docs directories
        if: steps.find-dirs.outputs.has_directories == 'true'
        run: |
          rm -rf docs  # クリーンな状態から開始
          mkdir -p docs/slides
          mkdir -p docs/handson

      - name: Generate materials for all seminars
        if: steps.find-dirs.outputs.has_directories == 'true'
        run: |
          # 処理結果を記録する変数
          PROCESSED_DIRS=""
          
          echo "${{ steps.find-dirs.outputs.all_dates }}" | while read DATE_DIR; do
            if [ -n "$DATE_DIR" ] && [ -d "$DATE_DIR" ]; then
              echo "=========================================="
              echo "Processing $DATE_DIR..."
              echo "=========================================="
              
              # スライド生成 (slide.mdが存在する場合のみ)
              if [ -f "$DATE_DIR/slide.md" ]; then
                echo "📊 Generating slides for $DATE_DIR"
                
                # 日付別のアセットディレクトリを作成
                mkdir -p "docs/slides/$DATE_DIR"
                
                # assetsディレクトリをコピー
                if [ -d "$DATE_DIR/assets" ]; then
                  echo "  📁 Copying assets directory"
                  cp -r "$DATE_DIR/assets" "docs/slides/$DATE_DIR/"
                fi
                
                # 同じディレクトリの画像ファイルもコピー
                find "$DATE_DIR" -maxdepth 1 \( -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif" -o -name "*.svg" \) | while read img_file; do
                  if [ -f "$img_file" ]; then
                    echo "  🖼️ Copying image: $(basename "$img_file")"
                    cp "$img_file" "docs/slides/$DATE_DIR/"
                  fi
                done
                
                # 作業ディレクトリに移動してMarpを実行
                cd "$DATE_DIR"
                
                # HTML生成
                echo "  📄 Generating HTML..."
                marp slide.md \
                  --html \
                  --allow-local-files \
                  --output "../docs/slides/$DATE_DIR.html"
                
                # PDF生成
                echo "  📑 Generating PDF..."
                marp slide.md \
                  --pdf \
                  --allow-local-files \
                  --output "../docs/slides/$DATE_DIR.pdf"
                
                cd ..
                
                # HTML内の画像パスを修正
                echo "  🔧 Adjusting image paths in HTML..."
                sed -i "s|src=\"\([^\"]*\)\"|src=\"$DATE_DIR/\1\"|g" "docs/slides/$DATE_DIR.html"
                sed -i "s|src=\"assets/|src=\"$DATE_DIR/assets/|g" "docs/slides/$DATE_DIR.html"
                
                echo "  ✅ Slides generated successfully for $DATE_DIR"
              else
                echo "  ⚠️ slide.md not found in $DATE_DIR"
              fi
              
              # ハンズオン資料のコピー (handsonディレクトリが存在する場合のみ)
              if [ -d "$DATE_DIR/handson" ]; then
                echo "  💻 Copying handson materials..."
                cp -r "$DATE_DIR/handson" "docs/handson/$DATE_DIR"
                echo "  ✅ Handson materials copied for $DATE_DIR"
              else
                echo "  ℹ️ No handson directory in $DATE_DIR"
              fi
              
              echo ""
            fi
          done

      - name: Generate site index
        if: steps.find-dirs.outputs.has_directories == 'true'
        run: |
          cat > docs/index.html << 'HTMLEOF'
          <!DOCTYPE html>
          <html lang="ja">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>📚 セミナー資料</title>
              <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.2.0/github-markdown-light.min.css">
              <style>
                  body { 
                      max-width: 980px; 
                      margin: 0 auto; 
                      padding: 45px; 
                      font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Noto Sans, Helvetica, Arial, sans-serif;
                      background-color: #f6f8fa;
                  }
                  .container {
                      background: white;
                      border-radius: 12px;
                      box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
                      padding: 40px;
                  }
                  .header {
                      text-align: center;
                      margin-bottom: 40px;
                      padding-bottom: 20px;
                      border-bottom: 2px solid #e1e4e8;
                  }
                  .header h1 {
                      font-size: 2.5em;
                      margin-bottom: 10px;
                  }
                  .session { 
                      margin: 20px 0; 
                      padding: 25px; 
                      border: 1px solid #e1e4e8; 
                      border-radius: 8px;
                      background: #fafbfc;
                      transition: transform 0.2s, box-shadow 0.2s;
                  }
                  .session:hover {
                      transform: translateY(-2px);
                      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                      background: #f8f9fa;
                  }
                  .session h2 {
                      margin-top: 0;
                      color: #24292e;
                      font-size: 1.5em;
                  }
                  .links { 
                      display: flex; 
                      gap: 15px; 
                      margin-top: 15px; 
                      flex-wrap: wrap; 
                  }
                  .links a { 
                      padding: 10px 20px; 
                      background: #0366d6; 
                      color: white; 
                      text-decoration: none; 
                      border-radius: 6px; 
                      font-size: 14px;
                      font-weight: 500;
                      transition: all 0.2s;
                      display: flex;
                      align-items: center;
                      gap: 8px;
                  }
                  .links a:hover { 
                      background: #0256cc; 
                      transform: translateY(-1px);
                      box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                  }
                  .links a.pdf {
                      background: #d73a49;
                  }
                  .links a.pdf:hover {
                      background: #cb2431;
                  }
                  .links a.handson {
                      background: #28a745;
                  }
                  .links a.handson:hover {
                      background: #218838;
                  }
                  .update-time {
                      text-align: center;
                      color: #6a737d;
                      font-size: 14px;
                      margin-bottom: 30px;
                  }
                  .footer {
                      text-align: center;
                      margin-top: 50px;
                      padding-top: 30px;
                      border-top: 1px solid #e1e4e8;
                      color: #6a737d;
                      font-size: 14px;
                  }
                  .no-materials {
                      color: #6a737d;
                      font-style: italic;
                      margin-top: 10px;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>📚 セミナー資料</h1>
                      <div class="update-time">最終更新: 
          HTMLEOF
          date '+%Y年%m月%d日 %H:%M (JST)' >> docs/index.html
          cat >> docs/index.html << 'HTMLEOF'
                      </div>
                  </div>
          HTMLEOF
          
          # 全ての日付ディレクトリをスキャンして一覧作成（新しい順）
          FOUND_ANY=false
          find . -maxdepth 1 -type d -name '[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]' | sort -r | while read dir; do
            DATE_DIR=$(basename "$dir")
            
            # 何か資料があるかチェック
            HAS_SLIDE_HTML=false
            HAS_SLIDE_PDF=false
            HAS_HANDSON=false
            
            [ -f "docs/slides/$DATE_DIR.html" ] && HAS_SLIDE_HTML=true
            [ -f "docs/slides/$DATE_DIR.pdf" ] && HAS_SLIDE_PDF=true
            [ -d "docs/handson/$DATE_DIR" ] && HAS_HANDSON=true
            
            # 何か資料がある場合のみ表示
            if [ "$HAS_SLIDE_HTML" = true ] || [ "$HAS_SLIDE_PDF" = true ] || [ "$HAS_HANDSON" = true ]; then
              FOUND_ANY=true
              echo "        <div class=\"session\">" >> docs/index.html
              echo "            <h2>📅 $DATE_DIR</h2>" >> docs/index.html
              echo "            <div class=\"links\">" >> docs/index.html
              
              # スライドリンク
              if [ "$HAS_SLIDE_HTML" = true ]; then
                echo "                <a href=\"slides/$DATE_DIR.html\">📊 スライド (HTML)</a>" >> docs/index.html
              fi
              if [ "$HAS_SLIDE_PDF" = true ]; then
                echo "                <a href=\"slides/$DATE_DIR.pdf\" class=\"pdf\">📄 スライド (PDF)</a>" >> docs/index.html
              fi
              
              # ハンズオンリンク
              if [ "$HAS_HANDSON" = true ]; then
                echo "                <a href=\"handson/$DATE_DIR/\" class=\"handson\">💻 ハンズオン</a>" >> docs/index.html
              fi
              
              echo "            </div>" >> docs/index.html
              echo "        </div>" >> docs/index.html
            fi
          done
          
          cat >> docs/index.html << 'HTMLEOF'
                  
                  <div class="footer">
                      <p>🤖 このページは GitHub Actions により自動生成されています</p>
                      <p><a href="https://github.com/${{ github.repository }}" style="color: #0366d6;">View on GitHub</a></p>
                  </div>
              </div>
          </body>
          </html>
          HTMLEOF

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        if: steps.find-dirs.outputs.has_directories == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

      - name: Deploy to GitHub Pages
        if: steps.find-dirs.outputs.has_directories == 'true'
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Summary
        if: steps.find-dirs.outputs.has_directories == 'true'
        run: |
          echo "## 🎉 デプロイ完了!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 処理結果:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 各ディレクトリの処理結果を表示
          echo "${{ steps.find-dirs.outputs.all_dates }}" | while read DATE_DIR; do
            if [ -n "$DATE_DIR" ] && [ -d "$DATE_DIR" ]; then
              echo "#### 📅 $DATE_DIR" >> $GITHUB_STEP_SUMMARY
              
              if [ -f "docs/slides/$DATE_DIR.html" ]; then
                echo "- ✅ スライド (HTML) 生成完了" >> $GITHUB_STEP_SUMMARY
              fi
              if [ -f "docs/slides/$DATE_DIR.pdf" ]; then
                echo "- ✅ スライド (PDF) 生成完了" >> $GITHUB_STEP_SUMMARY
              fi
              if [ -d "docs/handson/$DATE_DIR" ]; then
                echo "- ✅ ハンズオン資料 コピー完了" >> $GITHUB_STEP_SUMMARY
              fi
              
              if [ ! -f "$DATE_DIR/slide.md" ] && [ ! -d "$DATE_DIR/handson" ]; then
                echo "- ⚠️ 資料が見つかりませんでした" >> $GITHUB_STEP_SUMMARY
              fi
              
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "### 🔗 公開URL:" >> $GITHUB_STEP_SUMMARY
          echo "**${{ steps.deployment.outputs.page_url }}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 統計情報:" >> $GITHUB_STEP_SUMMARY
          echo "- 総ディレクトリ数: $(echo "${{ steps.find-dirs.outputs.all_dates }}" | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- HTML生成数: $(find docs/slides -name "*.html" 2>/dev/null | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- PDF生成数: $(find docs/slides -name "*.pdf" 2>/dev/null | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- ハンズオン数: $(find docs/handson -maxdepth 1 -type d 2>/dev/null | grep -E '[0-9]{4}-[0-9]{2}-[0-9]{2}' | wc -l)" >> $GITHUB_STEP_SUMMARY

      - name: No directories found
        if: steps.find-dirs.outputs.has_directories == 'false'
        run: |
          echo "## ⚠️ セミナーディレクトリが見つかりません" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "日付形式（YYYY-MM-DD）のディレクトリが見つかりませんでした。" >> $GITHUB_STEP_SUMMARY