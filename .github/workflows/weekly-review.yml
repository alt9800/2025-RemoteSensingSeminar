name: Weekly Slide Review
on:
  schedule:
    - cron: '0 3 * * 3' # 毎週水曜日 12:00 JST
  workflow_dispatch:
    inputs:
      target_date:
        description: 'レビュー対象の日付 (YYYY-MM-DD) - 空欄で最新'
        required: false
        type: string
      force_send:
        description: 'スライドがなくても通知を送る'
        required: false
        type: boolean
        default: false

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Check if seminar period is active
        id: period_check
        run: |
          CURRENT_DATE=$(date '+%Y%m%d')
          END_DATE="20250801"
          
          if [ $CURRENT_DATE -gt $END_DATE ]; then
            echo "🛑 セミナー期間終了: $CURRENT_DATE > $END_DATE"
            echo "period_active=false" >> $GITHUB_OUTPUT
            
            # 終了通知用のメッセージを準備
            echo "end_message=📚 セミナー期間が終了したため、このワークフローは停止されました。お疲れ様でした！" >> $GITHUB_OUTPUT
          else
            echo "✅ セミナー期間中: $CURRENT_DATE <= $END_DATE"
            echo "period_active=true" >> $GITHUB_OUTPUT
          fi

      - name: Send final notification (if period ended)
        if: steps.period_check.outputs.period_active == 'false'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{
                \"blocks\": [
                  {
                    \"type\": \"section\",
                    \"text\": {
                      \"type\": \"mrkdwn\",
                      \"text\": \"${{ steps.period_check.outputs.end_message }}\"
                    }
                  },
                  {
                    \"type\": \"context\",
                    \"elements\": [
                      {
                        \"type\": \"mrkdwn\",
                        \"text\": \"今後はワークフローを手動で無効化するか、ファイルを削除してください。\"
                      }
                    ]
                  }
                ]
              }" \
              $SLACK_WEBHOOK_URL
          fi
          
          echo "::warning::セミナー期間終了のため、ワークフローを停止してください"
          exit 0

      - name: Checkout repository
        if: steps.period_check.outputs.period_active == 'true'
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: steps.period_check.outputs.period_active == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Japanese fonts
        if: steps.period_check.outputs.period_active == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto-cjk fonts-noto-cjk-extra
          fc-cache -fv

      - name: Install Marp CLI
        if: steps.period_check.outputs.period_active == 'true'
        run: npm install -g @marp-team/marp-cli

      - name: Determine target date
        if: steps.period_check.outputs.period_active == 'true'
        id: target
        run: |
          if [ -n "${{ github.event.inputs.target_date }}" ]; then
            TARGET_DATE="${{ github.event.inputs.target_date }}"
          else
            # 最新の日付ディレクトリを取得
            TARGET_DATE=$(find . -maxdepth 1 -type d -name '[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]' | sort -r | head -n1 | sed 's|./||')
          fi
          
          echo "target_date=$TARGET_DATE" >> $GITHUB_OUTPUT
          echo "Target date: $TARGET_DATE"
          
          # スライドファイルの存在確認
          if [ -f "$TARGET_DATE/slide.md" ]; then
            echo "slide_exists=true" >> $GITHUB_OUTPUT
            echo "✅ Found slide.md in $TARGET_DATE"
          else
            echo "slide_exists=false" >> $GITHUB_OUTPUT
            echo "❌ slide.md not found in $TARGET_DATE"
          fi

      - name: Generate review PDF
        if: steps.target.outputs.slide_exists == 'true' && steps.period_check.outputs.period_active == 'true'
        run: |
          TARGET_DATE="${{ steps.target.outputs.target_date }}"
          
          echo "Generating review PDF for $TARGET_DATE..."
          
          # PDFディレクトリ作成
          mkdir -p review-output
          
          # PDF生成（元のディレクトリで実行して相対パス維持）
          cd "$TARGET_DATE"
          marp "slide.md" \
            --pdf \
            --allow-local-files \
            --output "../review-output/review-$TARGET_DATE.pdf"
          cd ..
          
          # ファイルサイズチェック
          PDF_SIZE=$(stat -c%s "review-output/review-$TARGET_DATE.pdf")
          echo "PDF size: $PDF_SIZE bytes"
          
          # Slack用の制限チェック（10MB = 10485760 bytes）
          if [ $PDF_SIZE -gt 10485760 ]; then
            echo "⚠️ PDF size exceeds Slack limit (10MB)"
            echo "pdf_too_large=true" >> $GITHUB_ENV
          else
            echo "✅ PDF size OK for Slack"
            echo "pdf_too_large=false" >> $GITHUB_ENV
          fi

      - name: Determine notification method
        if: steps.period_check.outputs.period_active == 'true'
        id: notification
        run: |
          if [ -n "${{ secrets.SLACK_BOT_TOKEN }}" ] && [ -n "${{ secrets.SLACK_REVIEW_CHANNEL }}" ]; then
            echo "method=bot" >> $GITHUB_OUTPUT
            echo "📤 Using Bot Token for file upload"
          elif [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "method=webhook" >> $GITHUB_OUTPUT
            echo "📤 Using Webhook for link sharing"
          else
            echo "method=none" >> $GITHUB_OUTPUT
            echo "❌ No Slack configuration found"
          fi

      - name: Send Slack notification with PDF (Bot Token)
        if: steps.target.outputs.slide_exists == 'true' && steps.notification.outputs.method == 'bot' && env.pdf_too_large == 'false' && steps.period_check.outputs.period_active == 'true'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL: ${{ secrets.SLACK_REVIEW_CHANNEL }}
        run: |
          TARGET_DATE="${{ steps.target.outputs.target_date }}"
          CURRENT_TIME=$(date '+%Y年%m月%d日 %H:%M JST')
          
          # メッセージ内容を変数に格納
          MESSAGE="$CURRENT_TIME 時点での資料はこちらです。レビューをお願いします。
          
          📋 レビューポイント:
          • 内容の正確性
          • 説明の分かりやすさ  
          • 時間配分
          • スライドデザイン
          
          💬 フィードバック方法: このスレッドにコメントをお願いします
          
          よろしくお願いします！"
          
          # PDFをSlackにアップロード
          UPLOAD_RESPONSE=$(curl -F file=@"review-output/review-$TARGET_DATE.pdf" \
            -F channels="$SLACK_CHANNEL" \
            -F title="📊 レビュー用スライド ($TARGET_DATE)" \
            -F initial_comment="$MESSAGE" \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            https://slack.com/api/files.upload)
          
          echo "Slack upload response: $UPLOAD_RESPONSE"
          
          # アップロード成功確認
          if echo "$UPLOAD_RESPONSE" | grep -q '"ok":true'; then
            echo "✅ PDF successfully uploaded to Slack"
          else
            echo "❌ Failed to upload PDF to Slack"
            echo "$UPLOAD_RESPONSE"
            exit 1
          fi

      - name: Send Slack notification with link (Webhook or large PDF)
        if: steps.target.outputs.slide_exists == 'true' && (steps.notification.outputs.method == 'webhook' || env.pdf_too_large == 'true') && steps.period_check.outputs.period_active == 'true'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          TARGET_DATE="${{ steps.target.outputs.target_date }}"
          PAGES_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          CURRENT_TIME=$(date '+%Y年%m月%d日 %H:%M JST')
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"${CURRENT_TIME} 時点での資料はこちらです。レビューをお願いします。\\n\\n⚠️ PDFサイズが大きいため、リンクでの共有となります\"
                  }
                },
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"📋 レビューポイント:\\n• 内容の正確性\\n• 説明の分かりやすさ\\n• 時間配分\\n• スライドデザイン\"
                  }
                },
                {
                  \"type\": \"actions\",
                  \"elements\": [
                    {
                      \"type\": \"button\",
                      \"text\": { \"type\": \"plain_text\", \"text\": \"📄 PDFダウンロード\" },
                      \"url\": \"${PAGES_URL}/slides/${TARGET_DATE}.pdf\",
                      \"style\": \"primary\"
                    },
                    {
                      \"type\": \"button\",
                      \"text\": { \"type\": \"plain_text\", \"text\": \"📊 HTMLプレビュー\" },
                      \"url\": \"${PAGES_URL}/slides/${TARGET_DATE}.html\"
                    }
                  ]
                },
                {
                  \"type\": \"context\",
                  \"elements\": [
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"💬 このスレッドにフィードバックをお願いします\"
                    }
                  ]
                }
              ]
            }" \
            $SLACK_WEBHOOK_URL

      - name: Send no-slide notification
        if: steps.target.outputs.slide_exists == 'false' && github.event.inputs.force_send == 'true' && steps.period_check.outputs.period_active == 'true'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          TARGET_DATE="${{ steps.target.outputs.target_date }}"
          PAGES_URL="https://alt9800.github.io/2025-RemoteSensingSeminar"
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"⚠️ **レビュー通知**\\n\\nまだ出来上がってないみたいです、少々お待ちください...\"
                  }
                },
                {
                  \"type\": \"actions\",
                  \"elements\": [
                    {
                      \"type\": \"button\",
                      \"text\": { \"type\": \"plain_text\", \"text\": \"📋 資料サイトで確認\" },
                      \"url\": \"${PAGES_URL}\",
                      \"style\": \"primary\"
                    }
                  ]
                },
                {
                  \"type\": \"context\",
                  \"elements\": [
                    {
                      \"type\": \"mrkdwn\",
                      \"text\": \"📝 資料の準備ができ次第、改めてレビュー依頼をお送りします\"
                    }
                  ]
                }
              ]
            }" \
            $SLACK_WEBHOOK_URL

      - name: Send no-configuration warning
        if: steps.notification.outputs.method == 'none' && steps.period_check.outputs.period_active == 'true'
        run: |
          echo "⚠️ Slack configuration missing!"
          echo ""
          echo "To enable Slack notifications, add one of:"
          echo "1. Bot Token (recommended for file uploads):"
          echo "   - SLACK_BOT_TOKEN"
          echo "   - SLACK_REVIEW_CHANNEL"
          echo ""
          echo "2. Webhook (links only):"
          echo "   - SLACK_WEBHOOK_URL"
          echo ""
          echo "PDF generated at: review-output/review-${{ steps.target.outputs.target_date }}.pdf"

      - name: Cleanup
        if: always()
        run: |
          rm -rf review-output