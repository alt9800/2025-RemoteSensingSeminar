name: Test Slack Notification
on:
  workflow_dispatch:
    inputs:
      target_date:
        description: '„ÉÜ„Çπ„ÉàÂØæË±°„ÅÆÊó•‰ªò (YYYY-MM-DD) - Á©∫Ê¨Ñ„ÅßÊúÄÊñ∞'
        required: false
        type: string
      notification_type:
        description: '„ÉÜ„Çπ„Éà„Åô„ÇãÈÄöÁü•„Çø„Ç§„Éó'
        required: true
        type: choice
        options:
          - 'bot_with_pdf'
          - 'webhook_with_links'
          - 'no_slide_notification'
          - 'test_all_methods'
        default: 'test_all_methods'
      test_message:
        description: '„ÉÜ„Çπ„ÉàË≠òÂà•Áî®„É°„ÉÉ„Çª„Éº„Ç∏'
        required: false
        type: string
        default: 'üß™ SlackÈÄöÁü•„ÉÜ„Çπ„Éà'

jobs:
  test-notification:
    runs-on: ubuntu-latest
    steps:
      - name: Show workflow version
        run: |
          echo "üìå Workflow Version: 2.1.0"
          echo "üìÖ Updated: 2025-01-25"
          echo "üîß Fix: Content-Type charsetËøΩÂä†„ÄÅcurlÈÄÅ‰ø°ÊñπÊ≥ï„ÅÆÊîπÂñÑ"
          echo ""
          echo "## üìå Workflow Version 2.1.0" >> $GITHUB_STEP_SUMMARY
          echo "Updated: 2025-01-25 - Content-Type charsetËøΩÂä†„ÄÅcurlÈÄÅ‰ø°ÊñπÊ≥ï„ÅÆÊîπÂñÑ" >> $GITHUB_STEP_SUMMARY

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Japanese fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto-cjk fonts-noto-cjk-extra
          fc-cache -fv

      - name: Install Marp CLI
        run: npm install -g @marp-team/marp-cli

      - name: Install jq for JSON processing
        run: |
          sudo apt-get install -y jq

      - name: Determine target date
        id: target
        run: |
          if [ -n "${{ github.event.inputs.target_date }}" ]; then
            TARGET_DATE="${{ github.event.inputs.target_date }}"
          else
            TARGET_DATE=$(find . -maxdepth 1 -type d -name '[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]' | sort -r | head -n1 | sed 's|./||')
          fi
          
          echo "target_date=$TARGET_DATE" >> $GITHUB_OUTPUT
          echo "üéØ Target date: $TARGET_DATE"
          
          if [ -f "$TARGET_DATE/slide.md" ]; then
            echo "slide_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Found slide.md in $TARGET_DATE"
          else
            echo "slide_exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå slide.md not found in $TARGET_DATE"
          fi

      - name: Check Slack configuration
        id: config
        run: |
          echo "üîç Checking Slack configuration..."
          
          if [ -n "${{ secrets.SLACK_BOT_TOKEN }}" ] && [ -n "${{ secrets.SLACK_REVIEW_CHANNEL }}" ]; then
            echo "bot_available=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Bot Token configuration found"
          else
            echo "bot_available=false" >> $GITHUB_OUTPUT
            echo "‚ùå Bot Token configuration missing"
          fi
          
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "webhook_available=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Webhook configuration found"
          else
            echo "webhook_available=false" >> $GITHUB_OUTPUT
            echo "‚ùå Webhook configuration missing"
          fi

      - name: Generate test PDF
        if: steps.target.outputs.slide_exists == 'true' && (github.event.inputs.notification_type == 'bot_with_pdf' || github.event.inputs.notification_type == 'test_all_methods')
        run: |
          TARGET_DATE="${{ steps.target.outputs.target_date }}"
          
          echo "üìÑ Generating test PDF for $TARGET_DATE..."
          
          mkdir -p test-output
          
          cd "$TARGET_DATE"
          marp "slide.md" \
            --pdf \
            --allow-local-files \
            --output "../test-output/test-$TARGET_DATE.pdf"
          cd ..
          
          PDF_SIZE=$(stat -c%s "test-output/test-$TARGET_DATE.pdf")
          echo "üìä PDF size: $PDF_SIZE bytes"
          
          if [ $PDF_SIZE -gt 10485760 ]; then
            echo "‚ö†Ô∏è PDF size exceeds Slack limit (10MB)"
            echo "„ÉÜ„Çπ„ÉàÁî®„Å´Â∞è„Åï„Å™PDF„ÇíÁîüÊàê„Åó„Åæ„Åô..."
            
            cd "$TARGET_DATE"
            head -50 slide.md > slide_short.md
            marp "slide_short.md" \
              --pdf \
              --allow-local-files \
              --output "../test-output/test-$TARGET_DATE.pdf"
            rm slide_short.md
            cd ..
            
            NEW_SIZE=$(stat -c%s "test-output/test-$TARGET_DATE.pdf")
            echo "üìä Shortened PDF size: $NEW_SIZE bytes"
          fi

      - name: Test Bot Token notification with PDF upload
        if: (github.event.inputs.notification_type == 'bot_with_pdf' || github.event.inputs.notification_type == 'test_all_methods') && steps.config.outputs.bot_available == 'true' && steps.target.outputs.slide_exists == 'true'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL: ${{ secrets.SLACK_REVIEW_CHANNEL }}
        run: |
          TARGET_DATE="${{ steps.target.outputs.target_date }}"
          CURRENT_TIME=$(TZ=Asia/Tokyo date '+%Y-%m-%d %H:%M JST')
          TEST_MSG="${{ github.event.inputs.test_message }}"
          
          echo "ü§ñ Testing Bot Token notification with PDF upload..."
          echo "   Version: 2.0.0"
          echo "   Target date: $TARGET_DATE"
          echo "   Channel: $SLACK_CHANNEL"
          
          if [ ! -f "test-output/test-$TARGET_DATE.pdf" ]; then
            echo "‚ùå PDF file not found: test-output/test-$TARGET_DATE.pdf"
            exit 1
          fi
          
          FILE_SIZE=$(stat -c%s "test-output/test-$TARGET_DATE.pdf")
          echo "üìä File size: $FILE_SIZE bytes"
          
          # „Ç∑„É≥„Éó„É´„Å™„É°„ÉÉ„Çª„Éº„Ç∏„ÉÜ„Ç≠„Çπ„Éà
          MESSAGE_TEXT="$TEST_MSG v2.0.0 - $CURRENT_TIME
          PDF: $TARGET_DATE
          ‚ö†Ô∏è „Åì„Çå„ÅØ„ÉÜ„Çπ„ÉàÈÄöÁü•„Åß„Åô"
          
          # Method 1: Êé®Â•®„Åï„Çå„ÇãÊñπÊ≥ï - jq„Çí‰ΩøÁî®„Åó„Å¶JSON„ÇíÁîüÊàê
          echo "üì§ Attempting PDF file upload with direct channel sharing..."
          
          # Step 1: „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâURL„ÇíÂèñÂæóÔºàjq„Çí‰ΩøÁî®Ôºâ
          echo "Step 1: Getting upload URL (using jq)..."
          
          # JSON„Éá„Éº„Çø„Çí‰ΩúÊàê
          UPLOAD_JSON=$(jq -n \
            --arg filename "test-slide-$TARGET_DATE.pdf" \
            --arg length "$FILE_SIZE" \
            --arg alt_txt "$TARGET_DATE „ÅÆ„Çπ„É©„Ç§„Éâ" \
            '{filename: $filename, length: ($length | tonumber), alt_txt: $alt_txt}')
          
          echo "Upload JSON: $UPLOAD_JSON"
          
          UPLOAD_URL_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$UPLOAD_JSON" \
            https://slack.com/api/files.getUploadURLExternal)
          
          echo "Upload URL response: $UPLOAD_URL_RESPONSE"
          
          # „É¨„Çπ„Éù„É≥„Çπ„ÇíÁ¢∫Ë™ç
          if echo "$UPLOAD_URL_RESPONSE" | jq -e '.ok == true' > /dev/null 2>&1; then
            # JSON„Åã„ÇâÂÄ§„ÇíÂÆâÂÖ®„Å´ÊäΩÂá∫
            UPLOAD_URL=$(echo "$UPLOAD_URL_RESPONSE" | jq -r '.upload_url')
            FILE_ID=$(echo "$UPLOAD_URL_RESPONSE" | jq -r '.file_id')
            
            echo "‚úÖ Upload URL obtained"
            echo "   File ID: $FILE_ID"
            echo "   Upload URL: ${UPLOAD_URL:0:50}..."
            
            # Step 2: „Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
            echo "Step 2: Uploading file..."
            UPLOAD_STATUS=$(curl -s -w "%{http_code}" -X POST \
              -F "file=@test-output/test-$TARGET_DATE.pdf" \
              "$UPLOAD_URL" \
              -o /dev/null)
            
            if [ "$UPLOAD_STATUS" = "200" ] || [ "$UPLOAD_STATUS" = "201" ] || [ "$UPLOAD_STATUS" = "204" ]; then
              echo "‚úÖ File uploaded successfully (HTTP $UPLOAD_STATUS)"
              
              # Step 3: „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫Ü„Å®„ÉÅ„É£„É≥„Éç„É´ÂÖ±Êúâ„ÇíÂêåÊôÇ„Å´ÂÆüË°å
              echo "Step 3: Completing upload and sharing to channel..."
              
              COMPLETE_RESPONSE=$(curl -s -X POST \
                -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
                -H "Content-Type: application/json; charset=utf-8" \
                --data-raw "{\"files\":[{\"id\":\"$FILE_ID\",\"title\":\"Test PDF v2.1.0\"}],\"channel_id\":\"$SLACK_CHANNEL\",\"initial_comment\":\"$MESSAGE_TEXT\"}" \
                https://slack.com/api/files.completeUploadExternal)
              
              echo "Complete upload response: $COMPLETE_RESPONSE"
              
              if echo "$COMPLETE_RESPONSE" | jq -e '.ok == true' > /dev/null 2>&1; then
                echo "üéâ PDF upload and sharing successful!"
                echo "‚úÖ File has been uploaded and shared to the channel"
              else
                ERROR_MSG=$(echo "$COMPLETE_RESPONSE" | jq -r '.error // "unknown"')
                echo "‚ùå Failed to complete upload: $ERROR_MSG"
                
                # Method 2: ‰ª£ÊõøÊñπÊ≥ï
                echo "üîÑ Trying alternative method..."
                
                # „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„ÅÆ„ÅøÂÆå‰∫Ü
                COMPLETE_ONLY_JSON=$(jq -n \
                  --arg file_id "$FILE_ID" \
                  --arg title "„ÉÜ„Çπ„ÉàÁî®„Çπ„É©„Ç§„Éâ ($TARGET_DATE)" \
                  '{
                    files: [{
                      id: $file_id,
                      title: $title
                    }]
                  }')
                
                COMPLETE_ONLY_RESPONSE=$(curl -s -X POST \
                  -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
                  -H "Content-Type: application/json" \
                  -d "$COMPLETE_ONLY_JSON" \
                  https://slack.com/api/files.completeUploadExternal)
                
                if echo "$COMPLETE_ONLY_RESPONSE" | jq -e '.ok == true' > /dev/null 2>&1; then
                  echo "‚úÖ Upload completed, now sharing..."
                  
                  # chat.postMessage„Åß„Éï„Ç°„Ç§„É´„ÇíÂÖ±Êúâ
                  SHARE_JSON=$(jq -n \
                    --arg channel "$SLACK_CHANNEL" \
                    --arg text "$MESSAGE_TEXT" \
                    --arg files "$FILE_ID" \
                    '{
                      channel: $channel,
                      text: $text,
                      files: $files
                    }')
                  
                  SHARE_RESPONSE=$(curl -s -X POST \
                    -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
                    -H "Content-Type: application/json" \
                    -d "$SHARE_JSON" \
                    https://slack.com/api/chat.postMessage)
                  
                  echo "Share response: $SHARE_RESPONSE"
                  
                  if echo "$SHARE_RESPONSE" | jq -e '.ok == true' > /dev/null 2>&1; then
                    echo "üéâ Alternative method successful!"
                  else
                    ERROR_MSG=$(echo "$SHARE_RESPONSE" | jq -r '.error // "unknown"')
                    echo "‚ùå Alternative method also failed: $ERROR_MSG"
                  fi
                fi
              fi
            else
              echo "‚ùå File upload failed (HTTP $UPLOAD_STATUS)"
            fi
          else
          # ÊúÄÁµÇ„Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±
          if ! echo "$UPLOAD_URL_RESPONSE" | jq -e '.ok == true' > /dev/null 2>&1; then
            echo ""
            echo "‚ùå All methods failed to get upload URL"
            echo ""
            echo "Debug: Testing basic API connection..."
            # API„ÅÆÂü∫Êú¨ÁöÑ„Å™Êé•Á∂ö„ÉÜ„Çπ„Éà
            AUTH_TEST=$(curl -s -X POST \
              -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
              -H "Content-Type: application/json; charset=utf-8" \
              https://slack.com/api/auth.test)
            
            echo "Auth test response: $AUTH_TEST"
            
            if echo "$AUTH_TEST" | jq -e '.ok == true' > /dev/null 2>&1; then
              echo "‚úÖ Bot token is valid"
              echo "User ID: $(echo "$AUTH_TEST" | jq -r '.user_id')"
              echo "Team: $(echo "$AUTH_TEST" | jq -r '.team')"
            else
              echo "‚ùå Bot token may be invalid"
            fi
          fi
          fi
          
          # Method 3: „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ - „É™„É≥„ÇØÈÄÅ‰ø°
          echo ""
          echo "üîÑ Fallback: Sending message with GitHub Pages link..."
          
          GITHUB_LINK="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/slides/$TARGET_DATE.pdf"
          FALLBACK_MESSAGE="$TEST_MSG v2.0.0 - $CURRENT_TIME
          üìé PDF: $GITHUB_LINK
          ‚ö†Ô∏è „ÉÜ„Çπ„ÉàÈÄöÁü•Ôºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ"
          
          FALLBACK_JSON=$(jq -n \
            --arg channel "$SLACK_CHANNEL" \
            --arg text "$FALLBACK_MESSAGE" \
            '{channel: $channel, text: $text}')
          
          FALLBACK_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$FALLBACK_JSON" \
            https://slack.com/api/chat.postMessage)
          
          echo "Fallback response: $FALLBACK_RESPONSE"
          
          if echo "$FALLBACK_RESPONSE" | jq -e '.ok == true' > /dev/null 2>&1; then
            echo "‚úÖ Fallback message sent successfully"
          else
            ERROR_MSG=$(echo "$FALLBACK_RESPONSE" | jq -r '.error // "unknown"')
            echo "‚ùå Fallback also failed: $ERROR_MSG"
          fi

      - name: Test Webhook notification
        if: (github.event.inputs.notification_type == 'webhook_with_links' || github.event.inputs.notification_type == 'test_all_methods') && steps.config.outputs.webhook_available == 'true'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          TARGET_DATE="${{ steps.target.outputs.target_date }}"
          PAGES_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          CURRENT_TIME=$(TZ=Asia/Tokyo date '+%Y-%m-%d %H:%M JST')
          TEST_MSG="${{ github.event.inputs.test_message }}"
          
          echo "ü™ù Testing Webhook notification (v2.0.0)..."
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"$TEST_MSG v2.0.0 - Webhook\\n$CURRENT_TIME\\n<${PAGES_URL}/slides/${TARGET_DATE}.pdf|üìÑ PDF> | <${PAGES_URL}/slides/${TARGET_DATE}.html|üìä HTML>\"
            }" \
            $SLACK_WEBHOOK_URL
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Webhook test successful!"
          else
            echo "‚ùå Webhook test failed"
          fi

      - name: Test no-slide notification
        if: github.event.inputs.notification_type == 'no_slide_notification' || github.event.inputs.notification_type == 'test_all_methods'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          TARGET_DATE="${{ steps.target.outputs.target_date }}"
          PAGES_URL="https://alt9800.github.io/2025-RemoteSensingSeminar"
          TEST_MSG="${{ github.event.inputs.test_message }}"
          
          echo "üì≠ Testing no-slide notification (v2.0.0)..."
          
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{
                \"text\": \"$TEST_MSG v2.0.0 - „Çπ„É©„Ç§„Éâ„Å™„Åó\\n‚ö†Ô∏è „Åæ„Å†Ê∫ñÂÇô‰∏≠„Åß„Åô\\n<${PAGES_URL}|üìã Ë≥áÊñô„Çµ„Ç§„Éà>\"
              }" \
              $SLACK_WEBHOOK_URL
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ No-slide notification test successful!"
            else
              echo "‚ùå No-slide notification test failed"
            fi
          else
            echo "‚ö†Ô∏è Webhook URL not configured, skipping no-slide test"
          fi

      - name: Test summary
        if: always()
        run: |
          echo "## üß™ SlackÈÄöÁü•„ÉÜ„Çπ„ÉàÁµêÊûú (v2.0.0)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**„ÉÜ„Çπ„ÉàÂÆüË°åÊó•ÊôÇ:** $(TZ=Asia/Tokyo date '+%YÂπ¥%mÊúà%dÊó• %H:%M JST')" >> $GITHUB_STEP_SUMMARY
          echo "**ÂØæË±°Êó•‰ªò:** ${{ steps.target.outputs.target_date }}" >> $GITHUB_STEP_SUMMARY
          echo "**„ÉÜ„Çπ„Éà„Çø„Ç§„Éó:** ${{ github.event.inputs.notification_type }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìä Ë®≠ÂÆöÁä∂Ê≥Å" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.config.outputs.bot_available }}" = "true" ]; then
            echo "- ‚úÖ Bot TokenË®≠ÂÆöÊ∏à„Åø" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Bot TokenÊú™Ë®≠ÂÆö" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.config.outputs.webhook_available }}" = "true" ]; then
            echo "- ‚úÖ WebhookË®≠ÂÆöÊ∏à„Åø" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå WebhookÊú™Ë®≠ÂÆö" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.target.outputs.slide_exists }}" = "true" ]; then
            echo "- ‚úÖ „Çπ„É©„Ç§„Éâ„Éï„Ç°„Ç§„É´Â≠òÂú®" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå „Çπ„É©„Ç§„Éâ„Éï„Ç°„Ç§„É´„Å™„Åó" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üí° Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó" >> $GITHUB_STEP_SUMMARY
          echo "1. Slack„Åß„ÉÜ„Çπ„ÉàÈÄöÁü•„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ" >> $GITHUB_STEP_SUMMARY
          echo "2. ÂïèÈ°å„Åå„ÅÇ„Çå„Å∞Ë®≠ÂÆö„ÇíË¶ãÁõ¥„Åó„Å¶„Åè„Å†„Åï„ÅÑ" >> $GITHUB_STEP_SUMMARY
          echo "3. Ê≠£Â∏∏„Åß„ÅÇ„Çå„Å∞Êú¨Áï™Áî®„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÇíÊúâÂäπ„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: |
          rm -rf test-output