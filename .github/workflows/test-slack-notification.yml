name: Slack PDF Notification
on:
  workflow_dispatch:
    inputs:
      target_date:
        description: '対象日付 (YYYY-MM-DD) - 空欄で最新'
        required: false
        type: string
      test_mode:
        description: 'テストモード'
        required: false
        type: boolean
        default: false

run-name: |
  Slack PDF通知 ${{ inputs.target_date || '(最新)' }} ${{ inputs.test_mode && '[TEST]' || '' }}

jobs:
  notify-slack:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        id: setup
        run: |
          echo "🚀 Slack PDF Notification v4.0"
          echo "📅 Form data方式でPDFアップロード"
          
          # 対象日付の決定
          if [ -n "${{ github.event.inputs.target_date }}" ]; then
            TARGET_DATE="${{ github.event.inputs.target_date }}"
          else
            TARGET_DATE=$(find . -maxdepth 1 -type d -name '[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]' | sort -r | head -n1 | sed 's|./||')
          fi
          
          echo "target_date=$TARGET_DATE" >> $GITHUB_OUTPUT
          echo "📁 Target: $TARGET_DATE"
          
          # ファイル存在確認
          if [ -f "$TARGET_DATE/slide.md" ]; then
            echo "slide_exists=true" >> $GITHUB_OUTPUT
            echo "✅ slide.md found"
          else
            echo "slide_exists=false" >> $GITHUB_OUTPUT
            echo "❌ slide.md not found"
          fi

      - name: Install dependencies
        if: steps.setup.outputs.slide_exists == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto-cjk fonts-noto-cjk-extra jq
          npm install -g @marp-team/marp-cli

      - name: Generate PDF
        if: steps.setup.outputs.slide_exists == 'true'
        id: generate
        run: |
          TARGET_DATE="${{ steps.setup.outputs.target_date }}"
          
          echo "📄 Generating PDF..."
          mkdir -p output
          
          cd "$TARGET_DATE"
          marp slide.md \
            --pdf \
            --allow-local-files \
            --output "../output/slide-$TARGET_DATE.pdf"
          cd ..
          
          PDF_SIZE=$(stat -c%s "output/slide-$TARGET_DATE.pdf")
          echo "pdf_size=$PDF_SIZE" >> $GITHUB_OUTPUT
          echo "✅ PDF generated: $PDF_SIZE bytes"

      - name: Upload PDF to Slack
        if: steps.setup.outputs.slide_exists == 'true' && env.SLACK_BOT_TOKEN != ''
        id: upload
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL: ${{ secrets.SLACK_REVIEW_CHANNEL }}
        run: |
          TARGET_DATE="${{ steps.setup.outputs.target_date }}"
          PDF_SIZE="${{ steps.generate.outputs.pdf_size }}"
          CURRENT_TIME=$(TZ=Asia/Tokyo date '+%Y年%m月%d日 %H:%M')
          TEST_MODE="${{ github.event.inputs.test_mode }}"
          
          # メッセージ作成
          if [ "$TEST_MODE" = "true" ]; then
            MESSAGE="🧪 テスト通知 - $CURRENT_TIME\nPDF: $TARGET_DATE"
          else
            MESSAGE="📊 週次レビュー資料が準備できました\n\n日付: $TARGET_DATE\n生成時刻: $CURRENT_TIME\n\n📋 レビューポイント:\n• 内容の正確性\n• 説明の分かりやすさ\n• 時間配分\n• スライドデザイン\n\n💬 フィードバックはスレッドにお願いします"
          fi
          
          echo "🔄 Starting upload process..."
          
          # Step 1: アップロードURL取得（Form data形式）
          echo "Getting upload URL..."
          UPLOAD_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -F "filename=slide-$TARGET_DATE.pdf" \
            -F "length=$PDF_SIZE" \
            https://slack.com/api/files.getUploadURLExternal)
          
          if echo "$UPLOAD_RESPONSE" | jq -e '.ok == true' > /dev/null 2>&1; then
            UPLOAD_URL=$(echo "$UPLOAD_RESPONSE" | jq -r '.upload_url')
            FILE_ID=$(echo "$UPLOAD_RESPONSE" | jq -r '.file_id')
            echo "✅ Got upload URL"
            
            # Step 2: ファイルアップロード
            echo "Uploading file..."
            HTTP_STATUS=$(curl -s -w "%{http_code}" -X POST \
              -F "file=@output/slide-$TARGET_DATE.pdf" \
              "$UPLOAD_URL" \
              -o /dev/null)
            
            if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "201" ] || [ "$HTTP_STATUS" = "204" ]; then
              echo "✅ File uploaded"
              
              # Step 3: アップロード完了とチャンネル共有
              echo "Completing upload..."
              
              # メッセージ内の改行をエスケープ
              ESCAPED_MESSAGE=$(echo "$MESSAGE" | sed ':a;N;$!ba;s/\n/\\n/g')
              
              COMPLETE_RESPONSE=$(curl -s -X POST \
                -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
                -H "Content-Type: application/json; charset=utf-8" \
                --data-raw "{
                  \"files\": [{
                    \"id\": \"$FILE_ID\",
                    \"title\": \"週次レビュー資料 - $TARGET_DATE\"
                  }],
                  \"channel_id\": \"$SLACK_CHANNEL\",
                  \"initial_comment\": \"$ESCAPED_MESSAGE\"
                }" \
                https://slack.com/api/files.completeUploadExternal)
              
              if echo "$COMPLETE_RESPONSE" | jq -e '.ok == true' > /dev/null 2>&1; then
                echo "🎉 SUCCESS! PDF uploaded and shared"
                echo "upload_success=true" >> $GITHUB_OUTPUT
              else
                echo "❌ Complete upload failed"
                echo "Error: $(echo "$COMPLETE_RESPONSE" | jq -r '.error')"
                echo "upload_success=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "❌ File upload failed (HTTP $HTTP_STATUS)"
              echo "upload_success=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Failed to get upload URL"
            echo "Error: $(echo "$UPLOAD_RESPONSE" | jq -r '.error')"
            echo "upload_success=false" >> $GITHUB_OUTPUT
          fi

      - name: Send fallback notification
        if: |
          (steps.setup.outputs.slide_exists == 'false' || steps.upload.outputs.upload_success == 'false') 
          && env.SLACK_BOT_TOKEN != ''
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL: ${{ secrets.SLACK_REVIEW_CHANNEL }}
        run: |
          TARGET_DATE="${{ steps.setup.outputs.target_date }}"
          CURRENT_TIME=$(TZ=Asia/Tokyo date '+%Y年%m月%d日 %H:%M')
          PAGES_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          
          if [ "${{ steps.setup.outputs.slide_exists }}" = "false" ]; then
            MESSAGE="⚠️ スライドがまだ準備できていません\n\n日付: $TARGET_DATE\n確認時刻: $CURRENT_TIME\n\n準備ができ次第、改めてお知らせします。"
          else
            MESSAGE="📎 PDFアップロードに失敗したため、リンクを共有します\n\n日付: $TARGET_DATE\n生成時刻: $CURRENT_TIME\n\nPDF: $PAGES_URL/slides/$TARGET_DATE.pdf\nHTML: $PAGES_URL/slides/$TARGET_DATE.html"
          fi
          
          ESCAPED_MESSAGE=$(echo "$MESSAGE" | sed ':a;N;$!ba;s/\n/\\n/g')
          
          curl -s -X POST \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-Type: application/json; charset=utf-8" \
            --data-raw "{
              \"channel\": \"$SLACK_CHANNEL\",
              \"text\": \"$ESCAPED_MESSAGE\"
            }" \
            https://slack.com/api/chat.postMessage

      - name: Send webhook notification
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          TARGET_DATE="${{ steps.setup.outputs.target_date }}"
          PAGES_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          CURRENT_TIME=$(TZ=Asia/Tokyo date '+%Y年%m月%d日 %H:%M')
          
          if [ "${{ steps.setup.outputs.slide_exists }}" = "true" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{
                \"blocks\": [
                  {
                    \"type\": \"section\",
                    \"text\": {
                      \"type\": \"mrkdwn\",
                      \"text\": \"📊 週次レビュー資料の準備ができました\\n\\n日付: $TARGET_DATE\\n生成時刻: $CURRENT_TIME\"
                    }
                  },
                  {
                    \"type\": \"actions\",
                    \"elements\": [
                      {
                        \"type\": \"button\",
                        \"text\": { \"type\": \"plain_text\", \"text\": \"📄 PDF\" },
                        \"url\": \"$PAGES_URL/slides/$TARGET_DATE.pdf\",
                        \"style\": \"primary\"
                      },
                      {
                        \"type\": \"button\",
                        \"text\": { \"type\": \"plain_text\", \"text\": \"📊 HTML\" },
                        \"url\": \"$PAGES_URL/slides/$TARGET_DATE.html\"
                      }
                    ]
                  }
                ]
              }" \
              $SLACK_WEBHOOK_URL
          fi

      - name: Summary
        if: always()
        run: |
          echo "## 📊 実行結果サマリー" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**バージョン:** v4.0 (Form data方式)" >> $GITHUB_STEP_SUMMARY
          echo "**実行時刻:** $(TZ=Asia/Tokyo date '+%Y年%m月%d日 %H:%M')" >> $GITHUB_STEP_SUMMARY
          echo "**対象日付:** ${{ steps.setup.outputs.target_date }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.setup.outputs.slide_exists }}" = "true" ]; then
            echo "✅ スライド: 存在" >> $GITHUB_STEP_SUMMARY
            echo "📄 PDFサイズ: ${{ steps.generate.outputs.pdf_size }} bytes" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ steps.upload.outputs.upload_success }}" = "true" ]; then
              echo "✅ Slackアップロード: 成功" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Slackアップロード: 失敗（フォールバック送信）" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ スライド: 未作成" >> $GITHUB_STEP_SUMMARY
          fi